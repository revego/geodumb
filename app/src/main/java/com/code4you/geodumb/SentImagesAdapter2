package com.code4you.geodumb

import android.os.Parcel
import android.os.Parcelable
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import java.text.SimpleDateFormat
import java.util.Locale

class SentImagesAdapter(
    private val sentImages: List<String>,
    private val onItemClickListener: OnItemClickListener
) : RecyclerView.Adapter<SentImagesAdapter.ViewHolder>(), Parcelable {

    interface OnItemClickListener {
        fun onItemClick(imagePath: String, latitude: Double, longitude: Double, city: String)
    }

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val imageView: ImageView = view.findViewById(R.id.imageView)
        val textViewDate: TextView = view.findViewById(R.id.textViewDate)
        val textViewAddress: TextView = view.findViewById(R.id.textViewAddress)
    }

    constructor(parcel: Parcel) : this(
        parcel.createStringArrayList(),
        TODO("onItemClickListener")
    ) {
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.activity_photo_detail, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val imagePath = sentImages[position]
        Glide.with(holder.itemView.context).load(imagePath).into(holder.imageView)

        // Ottieni i dettagli dal nome del file
        val details = getDetailsFromImagePath(imagePath)

        holder.textViewDate.text = "Date: " + details["date"]
        holder.textViewAddress.text = "Address: " + details["address"]

        holder.itemView.setOnClickListener {
            onItemClickListener.onItemClick(
                imagePath,
                details["latitude"]!!.toDouble(),
                details["longitude"]!!.toDouble(),
                details["city"]!!
            )
        }
    }

    override fun getItemCount(): Int {
        return sentImages.size
    }

    private fun getDetailsFromImagePath(imagePath: String): Map<String, String> {
        val fileName = imagePath.substring(imagePath.lastIndexOf("/") + 1)
        val pattern = Regex("([^_]+)_([^_]+)_([^_]+)_([^_]+)_.*\\.jpg")
        val matchResult = pattern.find(fileName)

        return if (matchResult != null) {
            val (city, address, latitude, longitude) = matchResult.destructured
            mapOf(
                "city" to city,
                "address" to address,
                "latitude" to latitude,
                "longitude" to longitude,
                "date" to getDateFromImagePath(fileName)
            )
        } else {
            mapOf(
                "city" to "City not available",
                "address" to "Address not available",
                "latitude" to "0.0",
                "longitude" to "0.0",
                "date" to "Date not available"
            )
        }
    }

    private fun getDateFromImagePath(imagePath: String): String {
        val timestampPattern = Regex("JPEG_(\\d{8}_\\d{6})_")
        val matchResult = timestampPattern.find(imagePath)

        return if (matchResult != null) {
            val timestamp = matchResult.groupValues[1]
            val sdf = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault())
            val date = sdf.parse(timestamp)
            val outputFormat = SimpleDateFormat("dd MMM yyyy, HH:mm:ss", Locale.getDefault())
            outputFormat.format(date!!)
        } else {
            "Date not available"
        }
    }

    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeStringList(sentImages)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<SentImagesAdapter> {
        override fun createFromParcel(parcel: Parcel): SentImagesAdapter {
            return SentImagesAdapter(parcel)
        }

        override fun newArray(size: Int): Array<SentImagesAdapter?> {
            return arrayOfNulls(size)
        }
    }
}
